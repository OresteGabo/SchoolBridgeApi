package io.gabo.schoolbridgeapi.controller;

import io.gabo.schoolbridgeapi.domain.Course;
import io.gabo.schoolbridgeapi.dto.CourseDTO;
import io.gabo.schoolbridgeapi.repository.CourseRepository;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/courses")
public class CourseController {

    private final CourseRepository courseRepository;

    public CourseController(CourseRepository courseRepository) {
        this.courseRepository = courseRepository;
    }

    @GetMapping
    public List<CourseDTO> getAllCourses() {
        List<Course> courses = courseRepository.findAll();
        return courses.stream()
                .map(this::toDTO)
                .collect(Collectors.toList());
    }

    @GetMapping("/{id}")
    public ResponseEntity<CourseDTO> getCourseById(@PathVariable Long id) {
        Optional<Course> course = courseRepository.findById(id);
        return course.map(value -> ResponseEntity.ok(toDTO(value)))
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    @PostMapping
    public CourseDTO createCourse(@RequestBody CourseDTO courseDTO) {
        Course course = fromDTO(courseDTO);
        Course saved = courseRepository.save(course);
        return toDTO(saved);
    }

    @PutMapping("/{id}")
    public ResponseEntity<CourseDTO> updateCourse(@PathVariable Long id, @RequestBody CourseDTO updatedCourseDTO) {
        return courseRepository.findById(id).map(course -> {
            course.setName(updatedCourseDTO.getName());
            course.setDescription(updatedCourseDTO.getDescription());
            Course saved = courseRepository.save(course);
            return ResponseEntity.ok(toDTO(saved));
        }).orElseGet(() -> ResponseEntity.notFound().build());
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteCourse(@PathVariable Long id) {
        if (courseRepository.existsById(id)) {
            courseRepository.deleteById(id);
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.notFound().build();
    }

    // Helper to convert entity to DTO
    private CourseDTO toDTO(Course course) {
        return new CourseDTO(course.getId(), course.getName(), course.getDescription());
    }

    // Helper to convert DTO to entity
    private Course fromDTO(CourseDTO dto) {
        Course course = new Course();
        course.setId(dto.getId());  // optional, if your ID is autogenerated, you may skip this on create
        course.setName(dto.getName());
        course.setDescription(dto.getDescription());
        return course;
    }
}
